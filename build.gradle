plugins {
    id "com.jfrog.bintray" version "1.8.4"
    id "com.jfrog.artifactory" version "4.7.5"
    id "com.github.johnrengelman.shadow" version "2.0.4"
    id "com.gorylenko.gradle-git-properties" version "1.5.1"
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
}

def jackson = ext["jackson.version"]

allprojects {
    apply plugin: "java"
    apply plugin: "jacoco"
    apply plugin: "io.spring.dependency-management"

    group = ext["project.publications.groupId"]
    version = ext["project.version"]

    repositories {
        jcenter()
    }

    dependencyManagement {
        imports {
            mavenBom "com.fasterxml.jackson:jackson-bom:$jackson"
        }
    }

    tasks.withType(Javadoc) {
        options {
            encoding = "UTF-8"
        }
    }
}

subprojects {

    archivesBaseName = "${rootProject.name}-${project.name}".toLowerCase()

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    def slf4j = ext["slf4j.version"]
    def guava = ext["guava.version"]
    def rxjava = ext["rxjava.version"]

    dependencies {
        compile "org.slf4j:slf4j-api:$slf4j"
        compile "com.google.guava:guava:$guava"
        compile "io.reactivex.rxjava2:rxjava:$rxjava"
        compile "com.fasterxml.jackson.core:jackson-databind"
        compile "com.fasterxml.jackson.core:jackson-annotations:$jackson"
    }

    apply from: "${rootDir}/gradle/deploy.gradle"

    test {
        useJUnitPlatform()
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }
    reports {
        html.enabled = true
        xml.enabled = true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
    }
}

task aggregateJavadoc(type: Javadoc,
        description: "Generate javadocs from all child projects as if it was a single project",
        group: JavaBasePlugin.DOCUMENTATION_GROUP
) {
    destinationDir file("${rootProject.buildDir}/docs/javadoc")
    failOnError false
    title = "${rootProject.name} ${rootProject.version} API"

    options {
        windowTitle = "${rootProject.name} ${rootProject.version}"
        addStringOption("Xdoclint:none", "-quiet")
        author = true
    }

    subprojects.each { project ->
        project.tasks.withType(Javadoc.class).each { doc ->
            source += doc.source
            classpath += doc.classpath
            excludes += doc.excludes
            includes += doc.includes
        }
    }
}

codeCoverageReport.dependsOn(subprojects*.test)

wrapper {
    gradleVersion = "4.10"
    distributionType = Wrapper.DistributionType.ALL
}