import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

import java.text.SimpleDateFormat

plugins {
    id "com.jfrog.bintray" version "1.8.4"
    id "org.jetbrains.dokka" version "0.9.17"
    id "org.jetbrains.kotlin.jvm" version "1.3.21"
    id "com.github.ben-manes.versions" version "0.20.0"
    id 'com.github.johnrengelman.shadow' version "4.0.3"
    id "com.gorylenko.gradle-git-properties" version "2.0.0" apply false
}

def timestamp() {
    def sdf = new SimpleDateFormat("MMM dd yyyy HH:mm:ss zzz", Locale.ENGLISH)
    sdf.setTimeZone(TimeZone.getTimeZone("GMT"))
    return sdf.format(new Date())
}

def bintrayUser = System.getenv("BINTRAY_USER") ?: findProperty("bintray.user").toString()
def bintrayApiKey = System.getenv("BINTRAY_API_KEY") ?: findProperty("bintray.api_key").toString()
def sonatypeUser = System.getenv("CENTRAL_USER") ?: findProject("central.user").toString()
def sonatypePassword = System.getenv("CENTRAL_PASSWORD") ?: findProject("central.password").toString()

allprojects {
    repositories {
        jcenter()
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "maven-publish"
    apply plugin: "com.jfrog.bintray"
    apply plugin: "org.jetbrains.dokka"
    apply plugin: "org.jetbrains.kotlin.jvm"


    tasks.withType(JavaCompile) {
        options.incremental = true
        options.encoding = "UTF-8"
    }

    tasks.withType(KotlinCompile) {
        incremental = true
        kotlinOptions.jvmTarget = "1.8"
    }


    archivesBaseName = "${rootProject.name.toLowerCase()}-${project.name.replace(':', '-')}"
    sourceCompatibility = targetCompatibility = 1.8

    dependencies {
        if (!["bom", "all", "auth", rootProject.name].contains(project.name)) {
            compile enforcedPlatform("io.projectreactor:reactor-bom:Californium-SR4")

            compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
            compile "org.jetbrains.kotlin:kotlin-reflect"

            compile "org.slf4j:slf4j-api:1.7.25"

            testCompile "ch.qos.logback:logback-classic:1.2.3"

            testCompile "io.projectreactor:reactor-test"
        }
    }

    jar {
        manifest {
            attributes([
                    'Manifest-Version'      : '1.0',
                    'Created-By'            : "Gradle ${gradle.gradleVersion} - JDK ${System.getProperty("java.specification.version")} (${System.getProperty("java.version")})",
                    'Implementation-Title'  : rootProject.name,
                    'Implementation-Vendor' : archivesBaseName,
                    'Implementation-Version': version,
                    'Implementation-Date'   : timestamp()
            ])
        }
    }

    dokka {
        moduleName = archivesBaseName
        jdkVersion = 8
    }

    javadoc {
        options {
            encoding = "UTF-8"
        }
        exclude "**/*Impl.java"
        exclude "**/GsonAdapters*.java"
    }

    task sourceJar(type: Jar, dependsOn: classes, description: 'Builds the sources jar.', group: 'build') {
        from sourceSets.main.allSource
        classifier "sources"
    }

    task javadocJar(type: Jar, dependsOn: javadoc, description: 'Builds the javadoc jar.', group: 'build') {
        from javadoc.outputDirectory
        classifier "javadoc"
    }

    task kdocJar(type: Jar, dependsOn: javadoc, description: 'Builds the kotlin-doc jar.', group: 'build') {
        dependsOn dokka
        from dokka.outputDirectory
        classifier "kdoc"
    }

    task dependecySize {
        if (["bom", "auth"].contains(project.name)) {
            enabled = false
        }
        doLast {
            def size = 0
            def formatStr = "%,10.2f"
            configurations.default.collect { it.length() / (1024 * 1024) }.each { size += it }

            def out = new StringBuffer()
            out << 'Total dependencies size:'.padRight(45)
            out << "${String.format(formatStr, size)} MiB\n\n"

            configurations
                    .default
                    .sort { -it.length() }
                    .each {
                out << "${it.name}".padRight(45)
                out << "${String.format(formatStr, (it.length() / 1024))} KiB\n"
            }
            println(out)
        }
    }

    if (project.name != "bom") {
        artifacts {
            if (project.name != "all") {
                archives sourceJar
            }
            archives javadocJar
            archives kdocJar
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifactId = archivesBaseName
                if (project.name != "bom") {
                    if (project.name != "all") {
                        from components.java
                        artifact sourceJar
                    }
                    artifact javadocJar
                    artifact kdocJar
                }

                pom {
                    url = "https://glitchlib.github.io/"
                    issueManagement {
                        system = 'GitHub'
                        url = 'https://github.com/glitchlib/glitch/issues'
                    }
                    ciManagement {
                        system = "Travis-CI"
                        url = "https://travis-ci.com/GlitchLib/glitch"
                    }
                    inceptionYear = "2018"
                    developers {
                        developer {
                            id = "stachu540"
                            name = "Damian Staszewski"
                            url = "https://github.com/stachu540"
                            timezone = "Europe/Warsaw"
                        }
                    }
                    licenses {
                        license {
                            name = "MIT"
                            url = "https://github.com/GlitchLib/glitch/blob/master/LICENCE.md"
                            distribution = "repo"
                        }
                    }
                    scm {
                        connection = "scm:git:https://github.com/glitchlib/glitch.git"
                        developerConnection = "scm:git:git@github.com:glitchlib/glitch.git"
                        url = "https://github.com/glitchlib/glitch"
                    }
                    distributionManagement {
                        downloadUrl = "https://github.com/glitchlib/glitch/releases"
                    }
                }
            }
        }
    }

    bintray {
        user = bintrayUser
        key = bintrayApiKey
        publications = ["maven"]
        dryRun = false
        publish = true
        override = false
        pkg {
            userOrg = bintrayUser
            repo = "GlitchLib"
            name = "Glitch"
            desc = "Java API Wrapper for Twitch"
            licenses = ["MIT"]
            publicDownloadNumbers = true
            vcsUrl = "https://github.com/GlitchLib/glitch.git"
            version {
                name = rootProject.version.toString()
                vcsTag = "v${rootProject.version}"
                released = new Date()
            }
        }
    }

    test {
        shouldRunAfter dependecySize
    }

}

rootProject.bintrayUpload.enabled = false
rootProject.bintrayPublish.enabled = false

wrapper {
    gradleVersion = "5.2.1"
    distributionType = Wrapper.DistributionType.ALL
}